@page "/"

@using Microsoft.AspNetCore.SignalR.Client


@inject IProductServices ProductService
@inject NavigationManager NavigationManager
@inject HttpClient Http

<h3>Manage Product</h3>
<div class="container">
    <div class="row">
        <div class="col-5">
            <div class="p-3 mb-1 bg-primary text-white text-center">Product Details</div>
            <EditForm Model="@loProduct">
                <div class="form-group">
                    <label for="name">Product Name</label>
                    <input type="text" id="name" class="form-control" @bind-value="@loProduct.stName" />
                </div>
                <div class="form-group">
                    <label for="price">Price</label>
                    <input type="text" id="price" class="form-control" @bind="@loProduct.dcPrice" />
                </div>
                <div class="form-group">
                    <label for="quantity">Quantity</label>
                    <input type="text" id="quantity" class="form-control" @bind="@loProduct.inQuantity" />
                </div>
                <div class="form-group">
                    <label for="Description">Description</label>
                    <input type="text" id="Description" class="form-control" @bind="@loProduct.stDescription" />
                </div>
                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="(()=>SubmitUpdate(loProduct))"> Save </button>
                </div>
            </EditForm>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <table class="table table-bordered">
                <thead class="thead-dark">
                    <tr>
                        <th>Product Id</th>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Description</th>
                        <th>Out of Stock</th>
                        <th>View/Update</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @if (loProductList.Any())
                    {
                        @foreach (var product in loProductList)
                        {
                            <tr>
                                <td>@product.inId</td>
                                <td>@product.stName</td>
                                <td>@product.dcPrice</td>
                                <td>@product.inQuantity</td>
                                <td>@product.stDescription</td>
                                <td>@product.flgOutOfStock</td>
                                <td><button class="btn btn-primary" @onclick="(()=>LoadUpdateProductForm(product))">Update</button></td>
                                <td><button class="btn btn-danger" @onclick="(()=>DeleteProduct(product))">Delete</button></td>
                            </tr>
                        } }
                    else
                    {
                        <tr><td colspan="6"><strong>No products available</strong></td></tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>



@code
{   public List<Product> loProductList = new List<Product>();
    public Product loProduct = new Product();
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await GetProductList();
        hubConnection = new HubConnectionBuilder().
            WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub")).
            Build();
        hubConnection.On("ReceiveMessage", async () => 
        {
            await GetProductList();StateHasChanged();
        });
        await hubConnection.StartAsync();
    }
    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;
    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
    public async Task GetProductList()
    {
        loProductList = await ProductService.LoadProducts();
    }
    public void LoadUpdateProductForm(Product foProduct)
    {
        loProduct = foProduct;
    }
    public async Task SubmitUpdate(Product foProduct)
    {
        loProduct = new Product();
        await ProductService.UpdateProduct(foProduct);
        if (IsConnected) await SendMessage();
             await GetProductList();
        //InvokeAsync(StateHasChanged);
    }
    Task SendMessage() => hubConnection.SendAsync("SendMessage");
    public async Task DeleteProduct(Product foproduct)
    {
        await ProductService.DeleteProduct((int)foproduct.inId);
        if (IsConnected) await SendMessage();
        await GetProductList();
    } }
